/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PredictionMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "betNoFor"
      | "betYesFor"
      | "claim"
      | "claimed"
      | "deadline"
      | "finalResult"
      | "finalize"
      | "finalized"
      | "getReward"
      | "getTotalNo"
      | "getTotalPool"
      | "getTotalYes"
      | "noBets"
      | "owner"
      | "startTime"
      | "totalNo"
      | "totalYes"
      | "yesBets"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "betNoFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "betYesFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalResult",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finalize", values: [boolean]): string;
  encodeFunctionData(functionFragment: "finalized", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalNo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalYes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "noBets", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalNo", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalYes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yesBets",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "betNoFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betYesFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTotalNo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalYes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "noBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalNo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalYes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yesBets", data: BytesLike): Result;
}

export interface PredictionMarket extends BaseContract {
  connect(runner?: ContractRunner | null): PredictionMarket;
  waitForDeployment(): Promise<this>;

  interface: PredictionMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  betNoFor: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  betYesFor: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  claimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  deadline: TypedContractMethod<[], [bigint], "view">;

  finalResult: TypedContractMethod<[], [boolean], "view">;

  finalize: TypedContractMethod<[_result: boolean], [void], "nonpayable">;

  finalized: TypedContractMethod<[], [boolean], "view">;

  getReward: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getTotalNo: TypedContractMethod<[], [bigint], "view">;

  getTotalPool: TypedContractMethod<[], [bigint], "view">;

  getTotalYes: TypedContractMethod<[], [bigint], "view">;

  noBets: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  startTime: TypedContractMethod<[], [bigint], "view">;

  totalNo: TypedContractMethod<[], [bigint], "view">;

  totalYes: TypedContractMethod<[], [bigint], "view">;

  yesBets: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "betNoFor"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "betYesFor"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalResult"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[_result: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getReward"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalNo"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalYes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "noBets"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalNo"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalYes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "yesBets"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  filters: {};
}
